(defun string-split (delimiter str)
  (declare (optimize (speed 3)))
  (declare (type string delimiter str))
  (let ((result nil)
        (steps (length delimiter)))
    (do ((pre-pos 0 (+ cur-pos steps))
         (cur-pos (search delimiter str :start2 0) (search delimiter str :start2 (+ cur-pos steps))))
      ((not cur-pos) (push (subseq str pre-pos) result) (nreverse result))
      (push (subseq str pre-pos cur-pos) result))))

(defun string-split.v0 (delimiter str)
  (let ((result nil)
        (steps (length delimiter)))
    (do ((pre-pos 0 (+ cur-pos steps))
         (cur-pos (search delimiter str :start2 0) (search delimiter str :start2 (+ cur-pos steps))))
      ((not cur-pos) (push (subseq str pre-pos) result) (nreverse result))
      (push (subseq str pre-pos cur-pos) result))))

(defun test ()
  (print (string-split " " " asd fgh  "))
  (print (string-split "  " " asd fgh  "))
  (time (dotimes (i 1000000)
          (string-split.v0 " " " asd fgh  ")))
  (time (dotimes (i 1000000)
          (string-split.v0 " " " asd fgh  ")))
  (time (dotimes (i 1000000)
          (string-split " " " asd fgh  "))))

(test)
;(disassemble 'string-split)
